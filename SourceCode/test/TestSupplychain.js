// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originWoodPickerID = accounts[1]
    const originWoodLandName = "John Doe"
    const originWoodLandInformation = "Yarray Valley"
    const originWoodLandLatitude = "-38.239770"
    const originWoodLandLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Best beans for Espresso"
   // const productPrice = web3.toWei(1, "ether")
    var itemState = 0
    const regulatorID = accounts[2]
    const craftsmanID = accounts[3]
    const retailerID = accounts[4]
    const consumerID = accounts[5]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    ///Available Accounts
    ///==================
    ///(0) 0xbd8Be1884f5b7bccCf567c37e2844B82499CCE65
    ///(1) 0x2dcE7d6Fe2d371a8269068F520Db4b7A544E3405
    ///(2) 0x497F395B14B82d9F7b328BBDDCDe043843345f74
    ///(3) 0xEAA6dBc0aF6BEDa5866334bA9e17025b6fEb6335
    ///(4) 0x350c9faE06Fa0315A5d97DE422DDe2e35bfA2344
    ///(5) 0x3e237d35Fcc7C75516a71d805EdDEa7f0083Dd16
    ///(6)  
    ///(7)  
    ///(8)  
    ///(9)  

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("originWoodPickerID: accounts[1] ", accounts[1])
    console.log("regulatorID: accounts[2] ", accounts[2])
    console.log("craftsmanID: accounts[3] ", accounts[3])
    console.log("Retailer: accounts[4] ", accounts[4])
    console.log("Consumer: accounts[5] ", accounts[5])

    // 1st Test
    it("Testing smart contract function tagItem() that allows a woodpicker to Tag wood", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Tagged()
    //    SupplyChain.events.MyEvent({
    //    },(error, event) => {console.log("Event Emitted : "+ event);eventEmitted = true});

       // var event = supplyChain.evntTagged()
   
        // Mark an item as Harvested by calling function harvestItem()
        await supplyChain.tagItem(upc, originWoodPickerID, 
                                  originWoodLandName, 
                                  originWoodLandInformation, 
                                  originWoodLandLatitude, 
                                  originWoodLandLongitude, 
                                  productNotes)

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], ownerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originWoodPickerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originWoodLandName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originWoodLandInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originWoodLandLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originWoodLandLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State')
      //  assert.equal(eventEmitted, true, 'Invalid event emitted')        
    })    

    /*
    // 2nd Test
    it("Testing smart contract function processItem() that allows a wood picker to to process coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        
        
        // Watch the emitted event Processed()
        

        // Mark an item as Processed by calling function processtItem()
        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        

        // Verify the result set
        
    })    

    // 3rd Test
    it("Testing smart contract function packItem() that allows a farmer to pack coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        
        
        // Watch the emitted event Packed()
        

        // Mark an item as Packed by calling function packItem()
        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        

        // Verify the result set
        
    })    

    // 4th Test
    it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        
        
        // Watch the emitted event ForSale()
        

        // Mark an item as ForSale by calling function sellItem()
        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        

        // Verify the result set
          
    })    

    // 5th Test
    it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        
        
        // Watch the emitted event Sold()
        var event = supplyChain.Sold()
        

        // Mark an item as Sold by calling function buyItem()
        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        

        // Verify the result set
        
    })    

    // 6th Test
    it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        
        
        // Watch the emitted event Shipped()
        

        // Mark an item as Sold by calling function buyItem()
        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        

        // Verify the result set
              
    })    

    // 7th Test
    it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        
        
        // Watch the emitted event Received()
        

        // Mark an item as Sold by calling function buyItem()
        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        

        // Verify the result set
             
    })    

    // 8th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        
        
        // Watch the emitted event Purchased()
        

        // Mark an item as Sold by calling function buyItem()
        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        

        // Verify the result set
        
    })    

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        
        
        // Verify the result set:
        
    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        
        
        // Verify the result set:
        
    })
*/
});

